syntax = "proto3";

package dataloader;

service DataLoader {
  // Medias
  rpc getMedias (EmptyRequest) returns (stream MediaResponse) {}
  rpc getMediaById (IdRequest) returns (MediaResponse) {}
	rpc getMediaIdFromURI (GetMediaIdFromURIRequest) returns (IdResponse) {}
  rpc addMedia (AddMediaRequest) returns (MediaResponse) {}
  rpc addMedias (stream AddMediaRequest) returns (stream AddMediaStreamResponse) {} 
  rpc deleteMedia (IdRequest) returns (StatusResponse) {}

	// TagSets
	rpc getTagSets(EmptyRequest) returns (stream TagSetResponse) {};
	rpc getTagSetById(IdRequest) returns (TagSetResponse) {};
	rpc getTagSetByName(GetTagSetRequestByName) returns (TagSetResponse) {};
	rpc createTagSet(CreateTagSetRequest) returns (TagSetResponse) {};

	// Tags
	rpc getTags(EmptyRequest) returns (stream TagResponse) {};
	rpc getTag(IdRequest) returns (TagResponse) {};
	rpc createOrGetTag(CreateTagRequest) returns (TagResponse) {};

	// Tagging
	rpc getTaggings(EmptyRequest) returns (stream TaggingResponse) {};
	rpc createTagging(CreateTaggingRequest) returns (TaggingResponse) {};
  rpc getMediasWithTag(IdRequest) returns (stream IdResponse) {};
  rpc getMediaTags(IdRequest) returns (stream IdResponse) {};

  // Hierarchies
	rpc getHierarchies(EmptyRequest) returns (stream HierarchyResponse) {};
  rpc getHierarchy(IdRequest) returns (HierarchyResponse) {};
	rpc createHierarchy(CreateHierarchyRequest) returns (HierarchyResponse) {};
  
  rpc createNode (CreateNodeRequest) returns (NodeResponse) {};
  rpc getNode (IdRequest) returns (NodeResponse) {};
  rpc getNodesOfHierarchy (IdRequest) returns (stream NodeResponse) {};
	rpc resetDatabase (EmptyRequest) returns (StatusResponse) {}
}

// General use
message EmptyRequest {}

message StatusResponse {
	bool success = 1;
}

message IdRequest {
  int64 id = 1;
}

message IdResponse {
	bool success = 1;
	int64 id = 2;
}

// Media / cubeobjects

message Media {
	int64 id = 1;
	string file_uri = 2;
  int32 file_type = 3;
	string thumbnail_uri = 4;
}

message MediaResponse {
	bool success = 1;
	Media media = 2;
}

message GetMediaIdFromURIRequest {
	string uri = 1;
}

message AddMediaRequest {
	Media media = 1;
}

message AddMediaStreamResponse {    
	bool success = 1;
	int64 count = 2;
}

// TagSets

message TagSet {
  int64 id = 1;
  string name = 2;
  int64 tagTypeId = 3;
}

message GetTagSetRequestByName {
  string name = 1;
}

message TagSetResponse {
  bool success = 1;
  TagSet tagset = 2;
}

message CreateTagSetRequest {
  string name = 1;
  int64 tagTypeId = 2;
}


// Tags

message AlphanumericalValue {
  string value = 1;
}

message NumericalValue {
  int64 value = 1;
}
message DateValue {
  // FORMAT: YYYY-MM-DD
  string value = 1;
}

message TimeValue {
  // FORMAT: hh:mm:ss
  string value = 1;
}

message TimeStampValue {
  // FORMAT: YYYY-MM-DD hh:mm:ss
  string value = 1;
}

message Tag {
	int64 id = 1;
	int64 tagSetId = 2;
	int64 tagTypeId = 3;
	oneof value {
    AlphanumericalValue alphanumerical = 4;
    TimeStampValue timestamp = 5;
    TimeValue time = 6;
    DateValue date = 7;
    NumericalValue numerical = 8;
  }
}

message TagResponse {
  bool success = 1;
	Tag tag = 2;
}

message CreateTagRequest {
  int64 tagSetId = 2;
	int64 tagTypeId = 3;
	oneof value {
    AlphanumericalValue alphanumerical = 4;
    TimeStampValue timestamp = 5;
    TimeValue time = 6;
    DateValue date = 7;
    NumericalValue numerical = 8;
  }
}



// Tagging (mapped in table objecttagrelations)
// Tagging

message Tagging {
  int64 mediaId = 1;
  int64 tagId = 2;
}

message TaggingResponse {
  bool success = 1;
  Tagging tagging = 2;
}

message CreateTaggingRequest {
  int64 mediaId = 1;
  int64 tagId = 2;
}

// Hierarchies
message Hierachy {
  int64 id = 1;
  string name = 2;
  int64 tagsetId = 3;
  int64 rootNodeId = 4;  
}

message GetHierarchyRequest {
  int64 tagId = 1;
}

message HierarchyResponse {
  bool success = 1;
  Hierachy Hierachy = 2;
}

message CreateHierarchyRequest {
  string name = 1;
  int64 tagsetId = 2;
  int64 rootNodeId = 3;
}

message CreateNodeRequest {
  int64 tagId = 1;
  int64 hierarchyId = 2;
  int64 parentNodeId = 3;
}


message Node {
  int64 id = 1;
  int64 tagId = 2;
  int64 hierarchyId = 3;
  int64 parentNodeId = 4;
}

message NodeResponse {
  bool success = 1;

}