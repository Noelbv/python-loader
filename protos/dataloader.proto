syntax = "proto3";

package dataloader;
option go_package = "m3.dataloader/dataloader";

service DataLoader {
  // Medias
  rpc getMedias (GetMediasRequest) returns (stream MediaResponse) {}
  rpc getMediaById (IdRequest) returns (MediaResponse) {}
	rpc getMediaByURI (GetMediaByURIRequest) returns (MediaResponse) {}
  rpc createMedia (CreateMediaRequest) returns (MediaResponse) {}
  rpc createMedias (stream CreateMediaRequest) returns (stream CreateMediaStreamResponse) {} 
  rpc deleteMedia (IdRequest) returns (StatusResponse) {}

	// TagSets
	rpc getTagSets(GetTagSetsRequest) returns (stream TagSetResponse) {};
	rpc getTagSetById(IdRequest) returns (TagSetResponse) {};
	rpc getTagSetByName(GetTagSetRequestByName) returns (TagSetResponse) {};
	rpc createTagSet(CreateTagSetRequest) returns (TagSetResponse) {};

	// Tags
	rpc getTags(GetTagsRequest) returns (stream TagResponse) {};
	rpc getTag(IdRequest) returns (TagResponse) {};
	rpc createTag(CreateTagRequest) returns (TagResponse) {};
  rpc createTagStream(stream CreateTagRequest) returns (stream CreateTagStreamResponse) {};

	// Tagging
	rpc getTaggings(EmptyRequest) returns (stream TaggingResponse) {};
  rpc getMediasWithTag(IdRequest) returns (RepeatedIdResponse) {};
  rpc getMediaTags(IdRequest) returns (RepeatedIdResponse) {};
	rpc createTagging(CreateTaggingRequest) returns (TaggingResponse) {};
  rpc createTaggingStream(stream CreateTaggingRequest) returns (stream CreateTaggingStreamResponse) {};

  // Hierarchies
	rpc getHierarchies(GetHierarchiesRequest) returns (stream HierarchyResponse) {};
  rpc getHierarchy(IdRequest) returns (HierarchyResponse) {};
	rpc createHierarchy(CreateHierarchyRequest) returns (HierarchyResponse) {};
  
  // Nodes
  rpc getNode (IdRequest) returns (NodeResponse) {};
  rpc getNodes (GetNodesRequest) returns (stream NodeResponse) {};
  rpc createNode (CreateNodeRequest) returns (NodeResponse) {};    
  rpc createNodeStream (stream CreateNodeRequest) returns (stream NodeResponse) {};    
  rpc deleteNode (IdRequest) returns (StatusResponse) {}
  
  // Other
	rpc resetDatabase (EmptyRequest) returns (StatusResponse) {};
}

// General use
message EmptyRequest {}

message StatusResponse {
  string error_message = 1;
}

message IdRequest {
  int64 id = 1;
}

message IdResponse {
	int64 id = 1;
  string error_message = 2;
}

message RepeatedIdResponse {
  repeated int64 ids = 1;
  string error_message = 2;
}

// Media / cubeobjects

message Media {
	int64 id = 1;
	string file_uri = 2;
  int64 file_type = 3;    // 1- Images, 2- Videos, 3- Audio, 4- Other
	string thumbnail_uri = 4;
}

message GetMediasRequest {
  int64 file_type = 1;
}

message GetMediaByURIRequest {
	string file_uri = 1;
}

message CreateMediaRequest {
  Media media = 1;
}

message MediaResponse {
  Media media = 1;
  string error_message = 2;
}

message CreateMediaStreamResponse {  
	int64 count = 1;
  string error_message = 2;
}


// TagSets

message TagSet {
  int64 id = 1;
  string name = 2;
  int64 tagTypeId = 3;
}

message GetTagSetsRequest {
  int64 tagTypeId = 1;
}

message GetTagSetRequestByName {
  string name = 1;
}

message CreateTagSetRequest {
  string name = 1;
  int64 tagTypeId = 2;
}

message TagSetResponse {
  TagSet tagset = 1;
  string error_message = 2;
}

// Tags
message Tag {
  int64 id = 1;
  int64 tagSetId = 2;
  int64 tagTypeId = 3;
  oneof value {
    AlphanumericalValue alphanumerical = 4;
    TimeStampValue timestamp = 5;
    TimeValue time = 6;
    DateValue date = 7;
    NumericalValue numerical = 8;
  }
}

message AlphanumericalValue {
  string value = 1;
}

message NumericalValue {
  int64 value = 1;
}
message DateValue {
  // FORMAT: YYYY-MM-DD
  string value = 1;
}

message TimeValue {
  // FORMAT: hh:mm:ss
  string value = 1;
}

message TimeStampValue {
  // FORMAT: YYYY-MM-DD hh:mm:ss
  string value = 1;
}


message GetTagsRequest {
  int64 tagSetId = 1;
	int64 tagTypeId = 2;
}

message CreateTagRequest {
  int64 tagSetId = 2;
  int64 tagTypeId = 3;
  oneof value {
    AlphanumericalValue alphanumerical = 4;
    TimeStampValue timestamp = 5;
    TimeValue time = 6;
    DateValue date = 7;
    NumericalValue numerical = 8;
  }
}

message TagResponse {
	Tag tag = 1;	
  string error_message = 2;
}

message CreateTagStreamResponse {
  map<int64, int64> id_map = 1;
}

// Tagging (mapped in table objecttagrelations)

message Tagging {
  int64 mediaId = 1;
  int64 tagId = 2;
}

message CreateTaggingRequest {
  int64 mediaId = 1;
  int64 tagId = 2;
}

message TaggingResponse {
  Tagging tagging = 1;
	string error_message = 2;
}

message CreateTaggingStreamResponse {  
	int64 count = 1;
  string error_message = 2;
}

// Hierarchies
message Hierarchy {
  int64 id = 1;
  string name = 2;
  int64 tagSetId = 3;
  int64 rootNodeId = 4;  
}

message GetHierarchiesRequest {
  int64 tagSetId = 1;
}

message CreateHierarchyRequest {
  string name = 1;
  int64 tagSetId = 2;
}

message HierarchyResponse {
  Hierarchy hierarchy = 1;
  string error_message = 2;
}


// Nodes
message Node {
  int64 id = 1;
  int64 tagId = 2;
  int64 hierarchyId = 3;
  int64 parentNodeId = 4;
}

message CreateNodeRequest {
  int64 tagId = 1; 
  int64 hierarchyId = 2;
  int64 parentNodeId = 3;   // if Null, then it is the rootnode of the hierarchy
}

message GetNodesRequest {
  int64 tagId = 1;
  int64 hierarchyId = 2;
  int64 parentNodeId = 3;
}

message NodeResponse {
  Node node = 1;
	string error_message = 2;
}